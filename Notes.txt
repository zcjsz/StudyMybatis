～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
Demo1
====================================================================================================================
一、环境配置
1. 添加 mybatis-3.4.6.jar，mysql-connector-java.5.1.40.jar 两个 jar 包
2. 在项目目录下创建 config 文件夹
3. 在 config 文件夹下新建 mybatis-config.xml 配置文件，修改数据库连接配置
4. 在本 Demo1 项目中没有 org/mybatis/example/BlogMapper.xml 这个映射文件，为了避免运行错误，将这行注释掉，并添加自己的映射文件。
--------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="com.mysql.jdbc.Driver"/>
				<property name="url" value="jdbc:mysql://vsuzatedev03:3306/datahouse"/>
				<property name="username" value="datasystem"/>
				<property name="password" value="amd@123"/>
			</dataSource>
		</environment>
	</environments>
	<mappers>
		<!--<mapper resource="org/mybatis/example/BlogMapper.xml"/>-->
		<mapper resource="EmployeeMapper.xml"/>
	</mappers>
</configuration>
--------------------------------------------------------------------------------------------------------------------
5. 可以使用 <environments> 标签配置多种运行环境，其 "default" 属性用来选定某个具体的环境
  5.1 <environment> 是配置具体的一种环境，必须有 <transactionManager>, <dataSource> 这两个标签
  5.2 <environment> 有一个属性 "id"，用来标识该配置环境的名称，用于切换环境使用
  5.3 <transactionManager> 事物管理器，其 "type" 属性有两种取值 JDBC | MANAGED. 只需要了解，一般用 Spring 来管理。
  5.4 <dataSource> 数据源，属性 "type" = |UNPOOLED|POOLED|JNDI|
    5.4.1 UNPOOLED: 不是用连接池， POOLED: 使用连接池， JNDI: Java 命名与目录接口
    5.4.2 以上三个都是 Mybatis 自带的数据源，还可以自定义数据源。自定义数据源要实现 DataFactory 接口，并定义 getDataSource 方法，type = 自定义数据源类名
--------------------------------------------------------------------------------------------------------------------
6. <databaseIdProvider> 多数据库类型支持设置，type="DB_VENDOR" 设置数据库厂商标识，配合 select databaseId 属性来使用
  6.1 设置数据库类型别名
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="SQL Server" value="sqlserver"/>
        <property name="DB2" value="db2"/>
        <property name="Oracle" value="oracle" />
    </databaseIdProvider>
  6.2 如果设置了 select databaseId 那优先加载带标记的语句
  <mapper namespace="jv.tdni.mybatis.dao.IEmployeeMapper">
      <select id="getEmployeeById" resultType="jv.tdni.mybatis.beans.Employee" databaseId="mysql">
          select id, last_name lastName, gender, email from employee where id = #{id}
      </select>
  </mapper>
--------------------------------------------------------------------------------------------------------------------
7. <mappers> 注册 SQL 映射文件
  7.1 <mapper> 属性， resource : 引用类路径下的 SQL 文件，  url : 引用网络获磁盘路径下的 SQL 文件
  7.2 <mapper> 属性， class : 引用接口，例如 class="jv.tdni.mybatis.dao.IEmployeeMapper"
    7.2.1 引用接口的条件:
      第一种方式: 必须有 SQL 映射文件，映射文件名与接口同名，而且要放在同一个目录下
      第二种方式: 没有 SQL 映射文件，所有 SQL 都是使用注解写在接口上
  7.3 SQL 映射方式推荐
    7.3.1 比较重要的，复杂的 SQL 写在映射文件中
    7.3.2 不重要的，简单的 SQL，为了开发方便可以写在注解中
  7.3 批量注册 <package name="jv.tdni.mybatis.dao">
--------------------------------------------------------------------------------------------------------------------
====================================================================================================================
二、数据库配置
1. 在数据库里面新建一个 employee table
2. 添加字段 id, last_name, gender, email
====================================================================================================================
三、创建映射文件 EmployeeMapper.xml
1. namespace 是定义该映射文件的名称空间
2. id 是该名称空间下的唯一标识
3. resultType 是查询结果返回的 bean 类型
4. SqlSession 是通过 namespace + id 来定位要执行的 sql 语句
5. #{id} 表示从传递过来的参数中取出 id 值
6. 将 SQL 映射文件 EmployeeMapper.xml 添加到全局配置文件 mybatis-config.xml
--------------------------------------------------------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="jv.tdni.mybatis.EmployeeMapper">
	<select id="selectEmployee" resultType="jv.tdni.mybatis.beans.Employee">
		select id, last_name lastName, gender, email from employee where id = #{id}
	</select>
</mapper>
--------------------------------------------------------------------------------------------------------------------
====================================================================================================================
四、创建 MybatisTest 测试文件
1. 准备 SQL 映射文件并注册到全局配置文件中
2. 根据全局配置文件 mybatis-config.xml 创建一个 SqlSessionFactory 对象
3. 通过 SqlSessionFactory 开启一个 SqlSession，这个 SqlSession 用于进行数据库会话，用完则关闭
4. SqlSession 通过 SQL 映射文件中定义的 namespace + id 来定位要执行的 SQL 语句
5. SqlSession 执行 SQL 查询语句返回一个 Java Bean 对象
====================================================================================================================
五、创建 MybatisTest 测试，通过 Employee 接口来实现数据查询
1. 为什么要通过接口实现查询：
   sqlSession.selectOne 里面要求的参数是 Object 类型，但是 sql 具体参数类型可能是字符串，可能是数值等类型，
   按照原先的方法是没有类型比较的，会造成 sql 语句类型匹配错误，而用接口的方式可以强制规定参数类型。
2. 创建 jv.tdni.mybatis.dao.IEmployeeMapper 接口类，并定义接口方法 getEmployeeById(Integer id)
3. 新建一个映射文件 IEmployeeMapper.xml，修改 namespace="jv.tdni.mybatis.dao.IEmployeeMapper"，id="getEmployeeById"
   Mybatis 会自动绑定接口方法和 SQL 语句。
4. 在测试文件中新建一个测试方法，
   通过 sqlSession.getMapper 获取 IEmployeeMapper 接口的代理对象，再通过代理对象执行接口方法查询数据。
5. 接口的好处是 1). 类型检查  2). 分离DAO规范和实现，可以应用于不同的框架 (解耦)
====================================================================================================================
六、总结
1. 两个重要的配置文件
2. SqlSession 代表一次会话，用完要关闭
3. SqlSession 非线程安全，每次使用前要先创建，避免被其他线程关闭了
====================================================================================================================
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～


～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
Demo2
====================================================================================================================
一、通过 properties 文件来配置数据库连接信息
1. 编写 database.properties 文件
2. 在 mybatis-config.xml 中通过 properties 标签引入 database.properties
3. 通过 ${jdbc.driver} 方式引入 properties 变量
====================================================================================================================
二、全局配置文件 settings 标签，Mybatis 全局属性设置标签
1. <setting name="mapUnderscoreToCamelCase" value="true"/>
   开启数据库字段到 Java 属性名称的映射，下划线映射为驼峰。
   比如数据库字段 last_name 会映射为 Java 属性名称 lastName
====================================================================================================================
三、全局配置文件 typeAliases 标签，Mybatis 别名设置标签
1. <typeAlias type="jv.tdni.mybatis.beans.Employee" alias="Employee"/>
   这样可以对 resultType 设置 Employee，不用包含 package 信息
2. 如果没有定义 alias 属性，则默认为类名小写，即 employee
3. 注意：别名不区分大小写
4. 实际应用中还是建议用全类名，这样方便定位到某个类
====================================================================================================================
四、通过 typeAliases 标签下的 package 标签简化包名使用，相当于批量起别名
1. 比如下面用例，Mybatis 会查找 domain.blog 包及子包下面所有的 java bean，并给这些 java bean 默认的别名：类名小写
2. 如果当前包和子包有相同命名的 java bean，那别名设置就会右冲突，这时可以使用 @Alias 注解给某个 java bean 单独设置别名
--------------------------------------------------------------------------------------------------------------------
<typeAliases>
    <package name="domain.blog"/>
</typeAliases>
--------------------------------------------------------------------------------------------------------------------
@Alias("author")
public class Author {
...
}
--------------------------------------------------------------------------------------------------------------------
====================================================================================================================
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～


～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～
Demo3
====================================================================================================================
一、typeHandlers 与 日期类型处理
1. MySQL 与 Java 数据类型匹配
2. JDK1.8 JSR310 新赠日期类型处理，可以解决数据库日期类型和Java日期类型的转换
3. Mybatis 低版本没有这个类型处理器，可以导入 mybatis-typehandlers-jsr310.jar 来使用。Mybatis 3.4.x 以上已经集成了这个类型处理器
4. Mybatis 3.4 之前的版本需要手动注册这些时间类型的处理器，3.4 版本以后的已经自动注册好了
====================================================================================================================
～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～